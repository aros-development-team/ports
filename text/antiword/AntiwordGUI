-- AntiwordGUI.alua -- AmiLua/Zulu GUI for antiword
-- $VER: antiwordgui.alua 1.1 (28.01.2007)
-- This is Public Domain software; use at your own risk

-- $Id$

require "muidefs"
require "muifuncs"
require "muiasl"

verbose = false

outputformats = strarray.new("PDF", "Postscript", "XML", "Text", "Formatted Text")
papersizes = strarray.new("10x14", "a3", "a4", "a5", "b4", "b5", "executive", "folio", "legal",
  "letter", "note", "quarto", "statement", "tabloid")
imagelevels = strarray.new("Ghostscript extension", "no images", "PS level 2", "PS level3")

ok_id = 1
infile_id = 3
outfile_id = 4

function main()
  local outputformat_rdio = mui.RadioObject(mui.MUIA_Radio_Entries, outputformats, mui.MUIA_Radio_Active, 3)
  local papersize_cyc = mui.CycleObject(mui.MUIA_Cycle_Entries, papersizes, mui.MUIA_Cycle_Active, 2)
  local image_cyc = mui.CycleObject(mui.MUIA_Cycle_Entries, imagelevels, mui.MUIA_Cycle_Active, 2)

  local ok_btn = mui.SimpleButton("Call antiword")

  local infile_btn = mui.SimpleButton("Input File")
  local outfile_btn = mui.SimpleButton("Output File")

  local infile_str = mui.StringObject(mui.MUIA_Frame, mui.MUIV_Frame_String)
  local outfile_str = mui.StringObject(mui.MUIA_Frame, mui.MUIV_Frame_String)
  local width_str = mui.StringObject(mui.MUIA_Frame, mui.MUIV_Frame_String,
    mui.MUIA_String_Accept , "0123456879")

  local hidden_cm = mui.make(mui.MUIO_Checkmark, 0)
  local removed_cm = mui.make(mui.MUIO_Checkmark, 0)
  local landscape_cm = mui.make(mui.MUIO_Checkmark, 0)

  window = mui.WindowObject(
    mui.MUIA_Window_Title, "Antiword GUI",
    mui.MUIA_Window_RootObject, mui.VGroup(
      mui.Child, mui.VGroup(
        mui.Child, mui.HGroup(
          mui.MUIA_Frame, mui.MUIV_Frame_Group,
          mui.MUIA_FrameTitle, "Output format",
          mui.Child, outputformat_rdio
        ),
        mui.Child, mui.ColGroup(2,
          mui.MUIA_Frame, mui.MUIV_Frame_Group,
          mui.MUIA_FrameTitle, "Options",
          mui.Child, mui.Label("Paper size"),
          mui.Child, papersize_cyc,
          mui.Child, mui.Label("Image level"),
          mui.Child, image_cyc,
          mui.Child, mui.Label("Include removed text"),
          mui.Child, removed_cm,
          mui.Child, mui.Label("Include hidden text"),
          mui.Child, hidden_cm,
          mui.Child, mui.Label("Landscape"),
          mui.Child, landscape_cm,
          mui.Child, mui.Label("Width"),
          mui.Child, width_str,
          mui.Child, infile_btn,
          mui.Child, infile_str,
          mui.Child, outfile_btn,
          mui.Child, outfile_str
        )
      ),
      mui.Child, mui.RectangleObject( 
        mui.MUIA_Rectangle_HBar, true,
        mui.MUIA_FixHeight,      2
      ),
      mui.Child, ok_btn
    )
  )
  app = mui.ApplicationObject(
    mui.MUIA_Application_Description, "GUI for antiword",
    mui.MUIA_Application_Window, window
  )
  assert(app:check(), "Cant create application")
  window:doint(mui.MUIM_Notify, mui.MUIA_Window_CloseRequest, true,
    app, 2, mui.MUIM_Application_ReturnID, mui.MUIV_Application_ReturnID_Quit)

  ok_btn:doint(mui.MUIM_Notify, mui.MUIA_Pressed, false, app, 2, mui.MUIM_Application_ReturnID, ok_id)
  infile_btn:doint(mui.MUIM_Notify, mui.MUIA_Pressed, false, app, 2, mui.MUIM_Application_ReturnID, infile_id)
  outfile_btn:doint(mui.MUIM_Notify, mui.MUIA_Pressed, false, app, 2, mui.MUIM_Application_ReturnID, outfile_id)

  window:set(mui.MUIA_Window_Open, true)

  local running = true
  local id,signals,file

  while running do
    id, signals = app:input()
    if id == mui.MUIV_Application_ReturnID_Quit then
      running = false
    elseif id == ok_id then
      local command = "antiword"
      local format_opt = outputformat_rdio:getint(mui.MUIA_Radio_Active)
      local papersize_opt = papersizes:get(papersize_cyc:getint(mui.MUIA_Cycle_Active) + 1)
      local infile_opt = infile_str:getstr(mui.MUIA_String_Contents)
      local outfile_opt = outfile_str:getstr(mui.MUIA_String_Contents)
      local width_opt = width_str:getint(mui.MUIA_String_Integer)
      local landscape_opt = landscape_cm:getint(mui.MUIA_Selected)
      local imagelevel_opt = image_cyc:getint(mui.MUIA_Cycle_Active)

      if (infile_opt == "") or (outfile_opt == "") then
        app:request(window, 0, "Error", "OK", "Input or output file name is missing")
      else
        if format_opt == 0 then -- pdf
          command = command .. " -a" .. papersize_opt .. " -i" .. imagelevel_opt
        elseif format_opt == 1 then -- ps
          command = command .. " -p" .. papersize_opt .. " -i" .. imagelevel_opt
          if landscape_opt == 1 then command = command .. " -L" end
        elseif format_opt == 2 then -- xml
          command = command .. " -x db"
        elseif format_opt == 3 then -- text
          command = command .. " -t" .. " -w" .. width_opt
        elseif format_opt == 4 then -- formatted text
          command = command .. " -f" .. " -w" .. width_opt
        end

        if removed_cm:getbool(mui.MUIA_Selected) then command = command .. " -r" end
        if hidden_cm:getbool(mui.MUIA_Selected) then command = command .. " -s" end
        command = command .. ' "' .. infile_opt .. '" >"' .. outfile_opt .. '"'
        if verbose then
          print (command)
        end
        local retval = os.execute(command)
        if not retval then
          app:request(window, 0, "Error", "OK", "antiword returned error code " .. retval)
        end
      end
    elseif id == infile_id then
      file = mui.filerequest(
        mui.ASLFR_TitleText, "Choose input file",
        mui.ASLFR_RejectIcons, true,
        mui.ASLFR_DoPatterns, true
      )
      if file then infile_str:set(mui.MUIA_String_Contents, file) end
    elseif id == outfile_id then
      file = mui.filerequest(
        mui.ASLFR_TitleText, "Choose output file",
        mui.ASLFR_DoSaveMode, true,
        mui.ASLFR_RejectIcons, true
      )
      if file then outfile_str:set(mui.MUIA_String_Contents, file)
      end
    end
    if running then mui.wait(signals) end
  end
end

_, err = pcall(main)
if err then print("Error: " .. err) end

if app then app:dispose() end
if outputformats then outputformats:dispose() end
if papersizes then papersizes:dispose() end
if imagelevels then imagelevels:dispose() end
