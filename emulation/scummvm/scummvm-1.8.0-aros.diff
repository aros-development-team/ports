diff -ruN scummvm-1.8.0/backends/fs/amigaos4/amigaos4-fs-factory.cpp scummvm-1.8.0.aros/backends/fs/amigaos4/amigaos4-fs-factory.cpp
--- scummvm-1.8.0/backends/fs/amigaos4/amigaos4-fs-factory.cpp	2016-02-26 22:20:21.000000000 +0000
+++ scummvm-1.8.0.aros/backends/fs/amigaos4/amigaos4-fs-factory.cpp	2021-01-19 10:15:40.400000000 +0000
@@ -20,7 +20,7 @@
  *
  */
 
-#if defined(__amigaos4__)
+#if defined(__AROS__) || defined(__amigaos4__)
 
 #include "backends/fs/amigaos4/amigaos4-fs-factory.h"
 #include "backends/fs/amigaos4/amigaos4-fs.h"
diff -ruN scummvm-1.8.0/backends/fs/amigaos4/amigaos4-fs.cpp scummvm-1.8.0.aros/backends/fs/amigaos4/amigaos4-fs.cpp
--- scummvm-1.8.0/backends/fs/amigaos4/amigaos4-fs.cpp	2016-02-26 22:20:21.000000000 +0000
+++ scummvm-1.8.0.aros/backends/fs/amigaos4/amigaos4-fs.cpp	2021-01-19 10:15:40.400000000 +0000
@@ -20,16 +20,29 @@
  *
  */
 
-#if defined(__amigaos4__)
+#if defined(__AROS__) || defined(__amigaos4__)
 
 #include "backends/fs/amigaos4/amigaos4-fs.h"
 #include "backends/fs/stdiostream.h"
 #include "common/debug.h"
 #include "common/util.h"
 
+#if defined(__amigaos4__)
+#define DOSCALL(x)      IDOS->x
+#else
+#include <dos/bptr.h>
+#define DOSCALL(x)      x
+#endif
+
 #define ENTER() /* debug(6, "Enter") */
 #define LEAVE() /* debug(6, "Leave") */
 
+#if defined(DEBUG) && (DEBUG > 0)
+#define DOUT(x) x
+#else
+#define DOUT(x)
+#endif
+
 /**
  * Returns the last component of a given path.
  *
@@ -56,21 +69,24 @@
 }
 
 AmigaOSFilesystemNode::AmigaOSFilesystemNode() {
-	ENTER();
+	ENTER()
+        DOUT(warning("%s()\n", __func__);)
 	_sDisplayName = "Available Disks";
 	_bIsValid = true;
 	_bIsDirectory = true;
 	_sPath = "";
 	_pFileLock = 0;
 	_nProt = 0; // Protection is ignored for the root volume
-	LEAVE();
+	LEAVE()
 }
 
 AmigaOSFilesystemNode::AmigaOSFilesystemNode(const Common::String &p) {
-	ENTER();
+	ENTER()
 
 	int offset = p.size();
 
+        DOUT(warning("%s('%s')\n", __func__, p.c_str());)
+
 	//assert(offset > 0);
 
 	if (offset <= 0) {
@@ -84,13 +100,14 @@
 	_bIsDirectory = false;
 	_bIsValid = false;
 
+#if defined(__amigaos4__)
 	// Check whether the node exists and if it's a directory
-	struct ExamineData * pExd = IDOS->ExamineObjectTags(EX_StringNameInput,_sPath.c_str(),TAG_END);
+	struct ExamineData * pExd = DOSCALL(ExamineObjectTags(EX_StringNameInput,_sPath.c_str(),TAG_END));
 	if (pExd) {
 		_nProt = pExd->Protection;
 		if (EXD_IS_DIRECTORY(pExd)) {
 			_bIsDirectory = true;
-			_pFileLock = IDOS->Lock((CONST_STRPTR)_sPath.c_str(), SHARED_LOCK);
+			_pFileLock = DOSCALL(Lock((CONST_STRPTR)_sPath.c_str(), SHARED_LOCK));
 			_bIsValid = (_pFileLock != 0);
 
 			// Add a trailing slash if needed
@@ -102,30 +119,51 @@
 			_bIsValid = true;
 		}
 
-		IDOS->FreeDosObject(DOS_EXAMINEDATA, pExd);
+		DOSCALL(FreeDosObject(DOS_EXAMINEDATA, pExd));
 	}
-
-	LEAVE();
+#else
+    if ((_pFileLock = Lock(_sPath.c_str(), ACCESS_READ)) != BNULL)
+    {
+        struct FileInfoBlock infoBlock;
+
+        _bIsValid = true;
+        if (Examine(_pFileLock, &infoBlock))
+        {
+            if (infoBlock.fib_DirEntryType > 0)
+            {
+                _bIsDirectory = true;
+                // Add a trailing slash if needed
+                const char c = _sPath.lastChar();
+                if (c != '/' && c != ':')
+                        _sPath += '/';
+            }
+            _nProt = infoBlock.fib_Protection;
+        }
+    }
+#endif
+	LEAVE()
 }
 
 AmigaOSFilesystemNode::AmigaOSFilesystemNode(BPTR pLock, const char *pDisplayName) {
-	ENTER();
+	ENTER()
 	int bufSize = MAXPATHLEN;
 	_pFileLock = 0;
 
+        DOUT(warning("%s(0x%p, '%s')\n", __func__, pLock, pDisplayName);)
+
 	while (true) {
 		char *n = new char[bufSize];
-		if (IDOS->NameFromLock(pLock, (STRPTR)n, bufSize) != DOSFALSE) {
+		if (DOSCALL(NameFromLock(pLock, (STRPTR)n, bufSize)) != DOSFALSE) {
 			_sPath = n;
-			_sDisplayName = pDisplayName ? pDisplayName : IDOS->FilePart((STRPTR)n);
+			_sDisplayName = pDisplayName ? pDisplayName : DOSCALL(FilePart((STRPTR)n));
 			delete[] n;
 			break;
 		}
 
-		if (IDOS->IoErr() != ERROR_LINE_TOO_LONG) {
+		if (DOSCALL(IoErr()) != ERROR_LINE_TOO_LONG) {
 			_bIsValid = false;
 			debug(6, "IoErr() != ERROR_LINE_TOO_LONG");
-			LEAVE();
+			LEAVE()
 			delete[] n;
 			return;
 		}
@@ -137,12 +175,13 @@
 	_bIsValid = false;
 	_bIsDirectory = false;
 
-	struct ExamineData * pExd = IDOS->ExamineObjectTags(EX_FileLockInput,pLock,TAG_END);
+#if defined(__amigaos4__)
+	struct ExamineData * pExd = DOSCALL(ExamineObjectTags(EX_FileLockInput,pLock,TAG_END));
 	if (pExd) {
 		_nProt = pExd->Protection;
 		if (EXD_IS_DIRECTORY(pExd)) {
 			_bIsDirectory = true;
-			_pFileLock = IDOS->DupLock(pLock);
+			_pFileLock = DOSCALL(DupLock(pLock));
 			_bIsValid = _pFileLock != 0;
 
 			const char c = _sPath.lastChar();
@@ -153,39 +192,65 @@
 			_bIsValid = true;
 		}
 
-        IDOS->FreeDosObject(DOS_EXAMINEDATA, pExd);
+        DOSCALL(FreeDosObject(DOS_EXAMINEDATA, pExd));
 	} else {
 		debug(6, "ExamineObject() returned NULL");
     }
+#else
+    struct FileInfoBlock infoBlock;
 
-	LEAVE();
+    if (Examine(pLock, &infoBlock))
+    {
+        _bIsValid = true;
+        if (infoBlock.fib_DirEntryType > 0)
+        {
+            _bIsDirectory = true;
+            _pFileLock = DOSCALL(DupLock(pLock));
+
+            // Add a trailing slash if needed
+            const char c = _sPath.lastChar();
+            if (c != '/' && c != ':')
+                    _sPath += '/';
+        }
+        _nProt = infoBlock.fib_Protection;
+    }
+
+#endif
+	LEAVE()
 }
 
 // We need the custom copy constructor because of DupLock()
 AmigaOSFilesystemNode::AmigaOSFilesystemNode(const AmigaOSFilesystemNode& node)
 : AbstractFSNode() {
-	ENTER();
+	ENTER()
+        DOUT(warning("%s()\n", __func__);)
 	_sDisplayName = node._sDisplayName;
 	_bIsValid = node._bIsValid;
 	_bIsDirectory = node._bIsDirectory;
 	_sPath = node._sPath;
-	_pFileLock = IDOS->DupLock(node._pFileLock);
+	_pFileLock = DOSCALL(DupLock(node._pFileLock));
 	_nProt = node._nProt;
-	LEAVE();
+	LEAVE()
 }
 
 AmigaOSFilesystemNode::~AmigaOSFilesystemNode() {
-	ENTER();
+	ENTER()
+        DOUT(warning("%s()\n", __func__);)
+
 	if (_pFileLock)
-		IDOS->UnLock(_pFileLock);
-	LEAVE();
+		DOSCALL(UnLock(_pFileLock));
+	LEAVE()
 }
 
 bool AmigaOSFilesystemNode::exists() const {
-	ENTER();
+	ENTER()
+
+        DOUT(warning("%s('%s')\n", __func__, _sPath.c_str());)
+
 	if (_sPath.empty())
 		return false;
 
+
 	bool nodeExists = false;
 
 	// Previously we were trying to examine the node in order
@@ -194,29 +259,32 @@
 	// lock on it, it means it exists...
 	//
 	// =============================  Old code
-	// BPTR pLock = IDOS->Lock((STRPTR)_sPath.c_str(), SHARED_LOCK);
+	// BPTR pLock = Lock((STRPTR)_sPath.c_str(), SHARED_LOCK);
 	// if (pLock)
 	// {
-	// 	if (IDOS->Examine(pLock, fib) != DOSFALSE)
+	// 	if (Examine(pLock, fib) != DOSFALSE)
 	// 		nodeExists = true;
-	// 	IDOS->UnLock(pLock);
+	// 	UnLock(pLock);
 	// }
 	//
-	// IDOS->FreeDosObject(DOS_FIB, fib);
+	// FreeDosObject(DOS_FIB, fib);
 	//
 	// =============================  New code
-	BPTR pLock = IDOS->Lock(_sPath.c_str(), SHARED_LOCK);
+	BPTR pLock = DOSCALL(Lock(_sPath.c_str(), SHARED_LOCK));
 	if (pLock) {
 		nodeExists = true;
-		IDOS->UnLock(pLock);
+		DOSCALL(UnLock(pLock));
 	}
 
-	LEAVE();
+	LEAVE()
 	return nodeExists;
 }
 
 AbstractFSNode *AmigaOSFilesystemNode::getChild(const Common::String &n) const {
-	ENTER();
+	ENTER()
+
+        DOUT(warning("%s('%s')\n", __func__, n.c_str());)
+        
 	if (!_bIsDirectory) {
 		debug(6, "Not a directory");
 		return 0;
@@ -229,63 +297,66 @@
 
 	newPath += n;
 
-	LEAVE();
+	LEAVE()
 	return new AmigaOSFilesystemNode(newPath);
 }
 
 bool AmigaOSFilesystemNode::getChildren(AbstractFSList &myList, ListMode mode, bool hidden) const {
-	ENTER();
+	ENTER()
 	bool ret = false;
 
+        DOUT(warning("%s('%s')\n", __func__, _sPath.c_str());)
+
 	// TODO: Honor the hidden flag
 	// There is no such thing as a hidden flag in AmigaOS...
 
 	if (!_bIsValid) {
 		debug(6, "Invalid node");
-		LEAVE();
+		LEAVE()
 		return false; // Empty list
 	}
 
 	if (!_bIsDirectory) {
 		debug(6, "Not a directory");
-		LEAVE();
+		LEAVE()
 		return false; // Empty list
 	}
 
 	if (isRootNode()) {
 		debug(6, "Root node");
-		LEAVE();
+		LEAVE()
 		myList = listVolumes();
 		return true;
 	}
 
-	APTR context = IDOS->ObtainDirContextTags(  EX_FileLockInput,	_pFileLock,
+#if defined(__amigaos4__)
+	APTR context = DOSCALL(ObtainDirContextTags(  EX_FileLockInput,	_pFileLock,
 												EX_DoCurrentDir,	TRUE,  /* for softlinks */
 												EX_DataFields,		(EXF_NAME|EXF_LINK|EXF_TYPE),
-												TAG_END);
+												TAG_END));
 	if (context) {
 		struct ExamineData * pExd = NULL; // NB: No need to free the value after usage, everything will be dealt with by the DirContext release
 
 		AmigaOSFilesystemNode *entry ;
-		while ( (pExd = IDOS->ExamineDir(context)) ) {
+		while ( (pExd = DOSCALL(ExamineDir(context))) ) {
 			if (     (EXD_IS_FILE(pExd) && ( Common::FSNode::kListFilesOnly == mode ))
 				||  (EXD_IS_DIRECTORY(pExd) && ( Common::FSNode::kListDirectoriesOnly == mode ))
 				||  Common::FSNode::kListAll == mode
 				)
 			{
-				BPTR pLock = IDOS->Lock( pExd->Name, SHARED_LOCK );
+				BPTR pLock = DOSCALL(Lock( pExd->Name, SHARED_LOCK ));
 				if (pLock) {
 					entry = new AmigaOSFilesystemNode( pLock, pExd->Name );
 					if (entry) {
 						myList.push_back(entry);
 					}
 
-					IDOS->UnLock(pLock);
+					DOSCALL(UnLock(pLock));
 				}
 			}
 		}
 
-		if (ERROR_NO_MORE_ENTRIES != IDOS->IoErr() ) {
+		if (ERROR_NO_MORE_ENTRIES != DOSCALL(IoErr())) {
 			debug(6, "An error occurred during ExamineDir");
 			ret = false;
 		} else {
@@ -293,23 +364,68 @@
 		}
 
 
-		IDOS->ReleaseDirContext(context);
+		DOSCALL(ReleaseDirContext(context));
 	} else {
 		debug(6, "Unable to ObtainDirContext");
 		ret = false;
 	}
+#else
+        struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocDosObject(DOS_FIB, NULL);
+        if (fib)
+        {
+            if (Examine(_pFileLock, fib))
+            {
+                AmigaOSFilesystemNode *entry;
+                char *fullpath = new char [256];
+                strcpy(fullpath, _sPath.c_str());
+                ret = true;
+
+                while(ExNext(_pFileLock, fib))
+                {
+                    bool addEntry = false;
+                    fullpath[_sPath.size()] = '\0';
+
+                    if (Common::FSNode::kListAll == mode)
+                        addEntry = true;
+                    else if (( Common::FSNode::kListDirectoriesOnly == mode ) && (fib->fib_DirEntryType == ST_USERDIR))
+                        addEntry = true;
+                    else if (( Common::FSNode::kListFilesOnly == mode ) && (fib->fib_DirEntryType == ST_FILE))
+                        addEntry = true;
+                    if (addEntry)
+                    {
+                        AddPart(fullpath, (CONST_STRPTR)fib->fib_FileName, 256);
+
+                        BPTR pLock = DOSCALL(Lock((CONST_STRPTR)fullpath, SHARED_LOCK ));
+                        if (pLock) {
+                                entry = new AmigaOSFilesystemNode( pLock, (const char *)fib->fib_FileName );
+                                if (entry) {
+                                        myList.push_back(entry);
+                                }
+
+                                DOSCALL(UnLock(pLock));
+                        }
+                    }
+                }
+            }
 
-	LEAVE();
+            FreeDosObject(DOS_FIB, fib);
+        }
+
+#endif
+
+	LEAVE()
 
 	return ret;
 }
 
 AbstractFSNode *AmigaOSFilesystemNode::getParent() const {
-	ENTER();
+	ENTER()
+
+        DOUT(warning("%s('%s')\n", __func__, _sPath.c_str());)
 
 	if (isRootNode()) {
 		debug(6, "Root node");
-		LEAVE();
+		LEAVE()
 		return new AmigaOSFilesystemNode(*this);
 	}
 
@@ -317,72 +433,115 @@
 
 	if (!_bIsDirectory) {
 		assert(!pLock);
-		pLock = IDOS->Lock((CONST_STRPTR)_sPath.c_str(), SHARED_LOCK);
+		pLock = DOSCALL(Lock((CONST_STRPTR)_sPath.c_str(), SHARED_LOCK));
 		assert(pLock);
 	}
 
 	AmigaOSFilesystemNode *node;
 
-	BPTR parentDir = IDOS->ParentDir( pLock );
+	BPTR parentDir = DOSCALL(ParentDir( pLock ));
 	if (parentDir) {
 		node = new AmigaOSFilesystemNode(parentDir);
-		IDOS->UnLock(parentDir);
+		DOSCALL(UnLock(parentDir));
 	} else
 		node = new AmigaOSFilesystemNode();
 
 	if (!_bIsDirectory) {
-		IDOS->UnLock(pLock);
+		DOSCALL(UnLock(pLock));
 	}
 
-	LEAVE();
+	LEAVE()
 
 	return node;
 }
 
 bool AmigaOSFilesystemNode::isReadable() const {
+        bool readable = false;
+
+        DOUT(warning("%s('%s')\n", __func__, _sPath.c_str());)
+
 	if (!_bIsValid)
-		return false;
+		return readable;
 
+#if defined(__amigaos4__)
 	// Regular RWED protection flags are low-active or inverted, thus the negation.
 	// Moreover, a pseudo root filesystem is readable whatever the
 	// protection says.
-	bool readable = !(_nProt & EXDF_OTR_READ) || isRootNode();
+	readable = !(_nProt & EXDF_OTR_READ) || isRootNode();
+#else
+        readable = (_nProt & FIBF_OTR_READ) || isRootNode();
+#endif
 
 	return readable;
 }
 
 bool AmigaOSFilesystemNode::isWritable() const {
+        bool writable = false;
+
+        DOUT(warning("%s('%s')\n", __func__, _sPath.c_str());)
+
 	if (!_bIsValid)
-		return false;
+		return writable;
 
+#if defined(__amigaos4__)
 	// Regular RWED protection flags are low-active or inverted, thus the negation.
 	// Moreover, a pseudo root filesystem is never writable whatever
 	// the protection says (Because of it's pseudo nature).
-	bool writable = !(_nProt & EXDF_OTR_WRITE) && !isRootNode();
+	writable = !(_nProt & EXDF_OTR_WRITE) && !isRootNode();
+#else
+	writable = (_nProt & FIBF_OTR_WRITE) && !isRootNode();
+#endif
 
 	return writable;
 }
 
+#if defined(__AROS__)
+struct sysVolNode
+{
+    struct Node svn_Node;
+    APTR                svn_Task;
+};
+
+#define ForeachNodeCXXSafe(list, current, next)              \
+for                                                       \
+(                                                         \
+    *(void **)&current = (void *)(((struct List *)(list))->lh_Head); \
+    (*(void **)&next = (void *)((struct Node *)(current))->ln_Succ); \
+    *(void **)&current = (void *)next                                \
+)
+
+#endif
+
 AbstractFSList AmigaOSFilesystemNode::listVolumes() const {
-	ENTER();
+	ENTER()
 
 	AbstractFSList myList;
 
-	const uint32 kLockFlags = LDF_READ | LDF_VOLUMES;
-	char buffer[MAXPATHLEN];
+        DOUT(warning("%s()\n", __func__);)
 
-	struct DosList *dosList = IDOS->LockDosList(kLockFlags);
+	uint32 kLockFlags = LDF_READ | LDF_VOLUMES;
+	char buffer[MAXPATHLEN];
+#if defined(__AROS__)
+        struct sysVolNode *newVolNode, *tmpNode;
+        struct List sysVolumes;
+        NEWLIST(&sysVolumes);
+#endif
+	struct DosList *dosList = DOSCALL(LockDosList(kLockFlags));
 	if (!dosList) {
-		debug(6, "Cannot lock the DOS list");
-		LEAVE();
+		debug(6, "Cannot lock the DOS Volume list");
+		LEAVE()
 		return myList;
 	}
 
-	dosList = IDOS->NextDosEntry(dosList, LDF_VOLUMES);
+	dosList = DOSCALL(NextDosEntry(dosList, LDF_VOLUMES));
 	while (dosList) {
 		if (dosList->dol_Type == DLT_VOLUME &&
-			dosList->dol_Name &&
-			dosList->dol_Port) {
+#if defined(__amigaos4__)
+			dosList->dol_Port &&
+#else
+                        dosList->dol_Task &&
+#endif
+                        dosList->dol_Name) {
 
 			// The original line was
 			//if (dosList->dol_Type == DLT_VOLUME &&
@@ -393,24 +552,27 @@
 			// 1) dol_Task wasn't a task pointer, it is a message port instead
 			// 2) It was redefined to be dol_Port in dos/obsolete.h in afore mentioned SDK
 
+#if defined(__amigaos4__)
 			// Copy name to buffer
-			IDOS->CopyStringBSTRToC(dosList->dol_Name, buffer, MAXPATHLEN);
+			DOSCALL(CopyStringBSTRToC(dosList->dol_Name, buffer, MAXPATHLEN));
+#else
+                        strncpy(buffer, AROS_BSTR_ADDR(dosList->dol_Name), AROS_BSTR_strlen(dosList->dol_Name));
+                        buffer[AROS_BSTR_strlen(dosList->dol_Name)] = '\0';
+#endif
 
+#if defined(__amigaos4__)
 			// Volume name + '\0'
 			char *volName = new char [strlen(buffer) + 1];
-
 			strcpy(volName, buffer);
-
 			strcat(buffer, ":");
 
-			BPTR volumeLock = IDOS->Lock((STRPTR)buffer, SHARED_LOCK);
+                        BPTR volumeLock = DOSCALL(Lock((STRPTR)buffer, SHARED_LOCK));
 			if (volumeLock) {
 
 				char *devName = new char [MAXPATHLEN];
 
-				// Find device name
-				IDOS->DevNameFromLock(volumeLock, devName, MAXPATHLEN, DN_DEVICEONLY);
-
+			// Find device name
+				DOSCALL(DevNameFromLock(volumeLock, devName, MAXPATHLEN, DN_DEVICEONLY));
 				sprintf(buffer, "%s (%s)", volName, devName);
 
 				delete[] devName;
@@ -420,26 +582,78 @@
 					myList.push_back(entry);
 				}
 
-				IDOS->UnLock(volumeLock);
+				DOSCALL(UnLock(volumeLock));
 			}
 
 			delete[] volName;
+#else
+			// Volume name + ':\0'
+			char *volName = new char [strlen(buffer) + 2];
+			strcpy(volName, buffer);
+			strcat(volName, ":");
+
+                        newVolNode = (struct sysVolNode *)AllocVec(sizeof(struct sysVolNode), MEMF_CLEAR);
+                        newVolNode->svn_Node.ln_Name = volName;
+                        newVolNode->svn_Task = dosList->dol_Task;
+                        AddTail(&sysVolumes, &newVolNode->svn_Node);
+#endif
 		}
-		dosList = IDOS->NextDosEntry(dosList, LDF_VOLUMES);
+		dosList = DOSCALL(NextDosEntry(dosList, LDF_VOLUMES));
+	}
+	DOSCALL(UnLockDosList(kLockFlags));
+#if defined(__AROS__)
+        kLockFlags = LDF_READ | LDF_DEVICES;
+	dosList = DOSCALL(LockDosList(kLockFlags));
+	if (!dosList) {
+		debug(6, "Cannot lock the DOS Device list");
+		LEAVE()
+		return myList;
 	}
 
-	IDOS->UnLockDosList(kLockFlags);
+	dosList = DOSCALL(NextDosEntry(dosList, LDF_VOLUMES));
+	while (dosList) {
+                ForeachNodeCXXSafe(&sysVolumes, newVolNode, tmpNode)
+                {
+                    if (dosList->dol_Task == newVolNode->svn_Task)
+                    {
+                        BPTR volumeLock = DOSCALL(Lock(newVolNode->svn_Node.ln_Name, SHARED_LOCK));
+                        Remove(&newVolNode->svn_Node);
+                        if (volumeLock)
+                        {
+                            char *devName = new char [AROS_BSTR_strlen(dosList->dol_Name) + 1];
+                            strncpy(devName, AROS_BSTR_ADDR(dosList->dol_Name), AROS_BSTR_strlen(dosList->dol_Name));
+                            devName[AROS_BSTR_strlen(dosList->dol_Name)] = '\0';
+                            sprintf(buffer, "%s (%s)", newVolNode->svn_Node.ln_Name, devName);
+                            delete[] devName;
+                            AmigaOSFilesystemNode *entry = new AmigaOSFilesystemNode(volumeLock, buffer);
+                            if (entry) {
+                                    myList.push_back(entry);
+                            }
+                            DOSCALL(UnLock(volumeLock));
+                        }
+                        delete[] newVolNode->svn_Node.ln_Name;
+                        FreeVec(newVolNode);
+                    }
+                }
+		dosList = DOSCALL(NextDosEntry(dosList, LDF_VOLUMES));
+	}
+	DOSCALL(UnLockDosList(kLockFlags));
+#endif
 
-	LEAVE();
+	LEAVE()
 
 	return myList;
 }
 
 Common::SeekableReadStream *AmigaOSFilesystemNode::createReadStream() {
+        DOUT(warning("%s()\n", __func__);)
+
 	return StdioStream::makeFromPath(getPath(), false);
 }
 
 Common::WriteStream *AmigaOSFilesystemNode::createWriteStream() {
+        DOUT(warning("%s()\n", __func__);)
+
 	return StdioStream::makeFromPath(getPath(), true);
 }
 
diff -ruN scummvm-1.8.0/backends/platform/sdl/amigaos/amigaos-main.cpp scummvm-1.8.0.aros/backends/platform/sdl/amigaos/amigaos-main.cpp
--- scummvm-1.8.0/backends/platform/sdl/amigaos/amigaos-main.cpp	2016-02-26 22:20:21.000000000 +0000
+++ scummvm-1.8.0.aros/backends/platform/sdl/amigaos/amigaos-main.cpp	2021-01-19 10:15:40.400000000 +0000
@@ -22,7 +22,7 @@
 
 #include "common/scummsys.h"
 
-#if defined(__amigaos4__)
+#if defined(__AROS__) || defined(__amigaos4__)
 
 #include "backends/platform/sdl/amigaos/amigaos.h"
 #include "backends/plugins/sdl/sdl-provider.h"
diff -ruN scummvm-1.8.0/backends/platform/sdl/amigaos/amigaos.cpp scummvm-1.8.0.aros/backends/platform/sdl/amigaos/amigaos.cpp
--- scummvm-1.8.0/backends/platform/sdl/amigaos/amigaos.cpp	2016-02-26 22:20:21.000000000 +0000
+++ scummvm-1.8.0.aros/backends/platform/sdl/amigaos/amigaos.cpp	2021-01-19 10:15:40.400000000 +0000
@@ -22,7 +22,7 @@
 
 #include "common/scummsys.h"
 
-#ifdef __amigaos4__
+#if defined(__AROS__) || defined(__amigaos4__)
 
 #include "backends/platform/sdl/amigaos/amigaos.h"
 #include "backends/fs/amigaos4/amigaos4-fs-factory.h"
diff -ruN scummvm-1.8.0/configure scummvm-1.8.0.aros/configure
--- scummvm-1.8.0/configure	2016-02-26 22:20:21.000000000 +0000
+++ scummvm-1.8.0.aros/configure	2021-01-19 10:15:40.400000000 +0000
@@ -1415,6 +1415,9 @@
 	_host_cpu=arm
 	_host_alias=arm-angstrom-linux-gnueabi
 	;;
+aros*)
+        _host_os=aros
+        ;;
 ppc-amigaos)
 	_host_os=amigaos
 	_host_cpu=powerpc
@@ -1831,7 +1834,7 @@
 			case $_host_os in
 			# newlib-based system include files suppress non-C89 function
 			# declarations under __STRICT_ANSI__
-			amigaos* | android | dreamcast | ds | gamecube | mingw* | n64 | psp | ps2 | ps3 | tizen | wii | wince )
+			aros* | amigaos* | android | dreamcast | ds | gamecube | mingw* | n64 | psp | ps2 | ps3 | tizen | wii | wince )
 				;;
 			*)
 				append_var CXXFLAGS "-ansi"
@@ -2131,6 +2134,9 @@
 echo_n "Checking hosttype... "
 echo $_host_os
 case $_host_os in
+        aros*)
+                add_line_to_config_mk 'AMIGAOS = 1'
+		;;
 	amigaos*)
 		append_var LDFLAGS "-Wl,--export-dynamic"
 		append_var LDFLAGS "-L/sdk/local/newlib/lib"
@@ -2877,6 +2883,8 @@
 			_seq_midi=no
 			_port_mk="backends/platform/openpandora/op-bundle.mk"
 			;;
+                *-aros)
+			;;
 		ppc-amigaos)
 			# PPC Linker requires this to fix relocation errors
 			append_var CXXFLAGS "-mlongcall"
@@ -3253,7 +3261,7 @@
 #
 echo_n "Checking if host is POSIX compliant... "
 case $_host_os in
-	amigaos* | cygwin* | dreamcast | ds | gamecube | mingw* | n64 | ps2 | ps3 | psp | wii | wince)
+	aros* | amigaos* | cygwin* | dreamcast | ds | gamecube | mingw* | n64 | ps2 | ps3 | psp | wii | wince)
 		_posix=no
 		;;
 	android | beos* | bsd* | darwin* | freebsd* | gnu* | gph-linux | haiku* | hpux* | iphone | ios7 | irix*| k*bsd*-gnu* | linux* | maemo | mint* | netbsd* | openbsd* | solaris* | sunos* | uclinux* | webos)
