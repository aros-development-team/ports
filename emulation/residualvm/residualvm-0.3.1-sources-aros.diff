diff -ruN residualvm-0.3.1/backends/events/sdl/sdl-events.cpp residualvm-0.3.1.aros/backends/events/sdl/sdl-events.cpp
--- residualvm-0.3.1/backends/events/sdl/sdl-events.cpp	2018-06-13 20:01:52.000000000 +0000
+++ residualvm-0.3.1.aros/backends/events/sdl/sdl-events.cpp	2025-06-16 14:37:05.088663380 +0000
@@ -31,7 +31,7 @@
 #include "common/textconsole.h"
 
 //ResidualVM specific:
-#if defined(__amigaos4__)
+#if defined(__amigaos4__) || defined(__AROS__)
 // KEYCODE_LESS and KEYCODE_GREATER are already defined in AmigaOS, inside
 // include/include_h/intuition/intuition.h (bug #3121350)
 #if defined(KEYCODE_LESS) && defined(KEYCODE_GREATER)
diff -ruN residualvm-0.3.1/backends/fs/amigaos4/amigaos4-fs.cpp residualvm-0.3.1.aros/backends/fs/amigaos4/amigaos4-fs.cpp
--- residualvm-0.3.1/backends/fs/amigaos4/amigaos4-fs.cpp	2018-06-13 20:01:52.000000000 +0000
+++ residualvm-0.3.1.aros/backends/fs/amigaos4/amigaos4-fs.cpp	2025-06-16 14:37:05.088663380 +0000
@@ -20,7 +20,7 @@
  *
  */
 
-#if defined(__amigaos4__)
+#if defined(__amigaos4__) || defined(__AROS__)
 
 #include "backends/fs/amigaos4/amigaos4-fs.h"
 #include "backends/fs/stdiostream.h"
@@ -84,6 +84,7 @@
 	_bIsDirectory = false;
 	_bIsValid = false;
 
+#if defined(__amigaos4__)
 	// Check whether the node exists and if it's a directory
 	struct ExamineData * pExd = IDOS->ExamineObjectTags(EX_StringNameInput,_sPath.c_str(),TAG_END);
 	if (pExd) {
@@ -104,6 +105,26 @@
 
 		IDOS->FreeDosObject(DOS_EXAMINEDATA, pExd);
 	}
+#else
+    if ((_pFileLock = Lock(_sPath.c_str(), ACCESS_READ)) != BNULL)
+    {
+        struct FileInfoBlock infoBlock;
+
+        _bIsValid = true;
+        if (Examine(_pFileLock, &infoBlock))
+        {
+            if (infoBlock.fib_DirEntryType > 0)
+            {
+                _bIsDirectory = true;
+                // Add a trailing slash if needed
+                const char c = _sPath.lastChar();
+                if (c != '/' && c != ':')
+                        _sPath += '/';
+            }
+            _nProt = infoBlock.fib_Protection;
+        }
+    }
+#endif
 
 	LEAVE();
 }
@@ -115,14 +136,14 @@
 
 	while (true) {
 		char *n = new char[bufSize];
-		if (IDOS->NameFromLock(pLock, (STRPTR)n, bufSize) != DOSFALSE) {
+		if (DOSCALL(NameFromLock(pLock, (STRPTR)n, bufSize)) != DOSFALSE) {
 			_sPath = n;
-			_sDisplayName = pDisplayName ? pDisplayName : IDOS->FilePart((STRPTR)n);
+			_sDisplayName = pDisplayName ? pDisplayName : DOSCALL(FilePart((STRPTR)n));
 			delete[] n;
 			break;
 		}
 
-		if (IDOS->IoErr() != ERROR_LINE_TOO_LONG) {
+		if (DOSCALL(IoErr()) != ERROR_LINE_TOO_LONG) {
 			_bIsValid = false;
 			debug(6, "IoErr() != ERROR_LINE_TOO_LONG");
 			LEAVE();
@@ -137,6 +158,7 @@
 	_bIsValid = false;
 	_bIsDirectory = false;
 
+#if defined(__amigaos4__)
 	struct ExamineData * pExd = IDOS->ExamineObjectTags(EX_FileLockInput,pLock,TAG_END);
 	if (pExd) {
 		_nProt = pExd->Protection;
@@ -157,6 +179,25 @@
 	} else {
 		debug(6, "ExamineObject() returned NULL");
     }
+#else
+    struct FileInfoBlock infoBlock;
+
+    if (Examine(pLock, &infoBlock))
+    {
+        _bIsValid = true;
+        if (infoBlock.fib_DirEntryType > 0)
+        {
+            _bIsDirectory = true;
+            _pFileLock = DupLock(pLock);
+
+            // Add a trailing slash if needed
+            const char c = _sPath.lastChar();
+            if (c != '/' && c != ':')
+                    _sPath += '/';
+        }
+        _nProt = infoBlock.fib_Protection;
+    }
+#endif
 
 	LEAVE();
 }
@@ -169,7 +210,7 @@
 	_bIsValid = node._bIsValid;
 	_bIsDirectory = node._bIsDirectory;
 	_sPath = node._sPath;
-	_pFileLock = IDOS->DupLock(node._pFileLock);
+	_pFileLock = DOSCALL(DupLock(node._pFileLock));
 	_nProt = node._nProt;
 	LEAVE();
 }
@@ -177,7 +218,7 @@
 AmigaOSFilesystemNode::~AmigaOSFilesystemNode() {
 	ENTER();
 	if (_pFileLock)
-		IDOS->UnLock(_pFileLock);
+		DOSCALL(UnLock(_pFileLock));
 	LEAVE();
 }
 
@@ -205,10 +246,10 @@
 	// IDOS->FreeDosObject(DOS_FIB, fib);
 	//
 	// =============================  New code
-	BPTR pLock = IDOS->Lock(_sPath.c_str(), SHARED_LOCK);
+	BPTR pLock = DOSCALL(Lock(_sPath.c_str(), SHARED_LOCK));
 	if (pLock) {
 		nodeExists = true;
-		IDOS->UnLock(pLock);
+		DOSCALL(UnLock(pLock));
 	}
 
 	LEAVE();
@@ -259,6 +300,7 @@
 		return true;
 	}
 
+#if defined(__amigaos4__)
 	APTR context = IDOS->ObtainDirContextTags(  EX_FileLockInput,	_pFileLock,
 												EX_DoCurrentDir,	TRUE,  /* for softlinks */
 												EX_DataFields,		(EXF_NAME|EXF_LINK|EXF_TYPE),
@@ -298,6 +340,48 @@
 		debug(6, "Unable to ObtainDirContext");
 		ret = false;
 	}
+#else
+        struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocDosObject(DOS_FIB, NULL);
+        if (fib)
+        {
+            if (Examine(_pFileLock, fib))
+            {
+                AmigaOSFilesystemNode *entry;
+                char *fullpath = new char [256];
+                strcpy(fullpath, _sPath.c_str());
+                ret = true;
+
+                while(ExNext(_pFileLock, fib))
+                {
+                    bool addEntry = false;
+                    fullpath[_sPath.size()] = '\0';
+
+                    if (Common::FSNode::kListAll == mode)
+                        addEntry = true;
+                    else if (( Common::FSNode::kListDirectoriesOnly == mode ) && (fib->fib_DirEntryType == ST_USERDIR))
+                        addEntry = true;
+                    else if (( Common::FSNode::kListFilesOnly == mode ) && (fib->fib_DirEntryType == ST_FILE))
+                        addEntry = true;
+                    if (addEntry)
+                    {
+                        AddPart(fullpath, (CONST_STRPTR)fib->fib_FileName, 256);
+
+                        BPTR pLock = Lock((CONST_STRPTR)fullpath, SHARED_LOCK );
+                        if (pLock) {
+                                entry = new AmigaOSFilesystemNode( pLock, (const char *)fib->fib_FileName );
+                                if (entry) {
+                                        myList.push_back(entry);
+                                }
+
+                                UnLock(pLock);
+                        }
+                    }
+                }
+            }
+
+            FreeDosObject(DOS_FIB, fib);
+        }
+#endif
 
 	LEAVE();
 
@@ -317,21 +401,21 @@
 
 	if (!_bIsDirectory) {
 		assert(!pLock);
-		pLock = IDOS->Lock((CONST_STRPTR)_sPath.c_str(), SHARED_LOCK);
+		pLock = DOSCALL(Lock((CONST_STRPTR)_sPath.c_str(), SHARED_LOCK));
 		assert(pLock);
 	}
 
 	AmigaOSFilesystemNode *node;
 
-	BPTR parentDir = IDOS->ParentDir( pLock );
+	BPTR parentDir = DOSCALL(ParentDir( pLock ));
 	if (parentDir) {
 		node = new AmigaOSFilesystemNode(parentDir);
-		IDOS->UnLock(parentDir);
+		DOSCALL(UnLock(parentDir));
 	} else
 		node = new AmigaOSFilesystemNode();
 
 	if (!_bIsDirectory) {
-		IDOS->UnLock(pLock);
+		DOSCALL(UnLock(pLock));
 	}
 
 	LEAVE();
@@ -343,11 +427,15 @@
 	if (!_bIsValid)
 		return false;
 
+	bool readable;
+#if defined(__amigaos4__)
 	// Regular RWED protection flags are low-active or inverted, thus the negation.
 	// Moreover, a pseudo root filesystem is readable whatever the
 	// protection says.
-	bool readable = !(_nProt & EXDF_OTR_READ) || isRootNode();
-
+	readable = !(_nProt & EXDF_OTR_READ) || isRootNode();
+#else
+	readable = (_nProt & FIBF_OTR_READ) || isRootNode();
+#endif
 	return readable;
 }
 
@@ -355,34 +443,54 @@
 	if (!_bIsValid)
 		return false;
 
+	bool writable;
+#if defined(__amigaos4__)
 	// Regular RWED protection flags are low-active or inverted, thus the negation.
 	// Moreover, a pseudo root filesystem is never writable whatever
 	// the protection says (Because of it's pseudo nature).
-	bool writable = !(_nProt & EXDF_OTR_WRITE) && !isRootNode();
+	writable = !(_nProt & EXDF_OTR_WRITE) && !isRootNode();
+#else
+	writable = (_nProt & FIBF_OTR_WRITE) && !isRootNode();
+#endif
 
 	return writable;
 }
 
+#if defined(__AROS__)
+struct sysVolNode
+{
+    struct Node svn_Node;
+    APTR                svn_Task;
+};
+#endif
 AbstractFSList AmigaOSFilesystemNode::listVolumes() const {
 	ENTER();
 
 	AbstractFSList myList;
 
-	const uint32 kLockFlags = LDF_READ | LDF_VOLUMES;
+	uint32 kLockFlags = LDF_READ | LDF_VOLUMES;
 	char buffer[MAXPATHLEN];
-
-	struct DosList *dosList = IDOS->LockDosList(kLockFlags);
+#if defined(__AROS__)
+        struct sysVolNode *newVolNode, *tmpNode;
+        struct List sysVolumes;
+        NEWLIST(&sysVolumes);
+#endif
+	struct DosList *dosList = DOSCALL(LockDosList(kLockFlags));
 	if (!dosList) {
 		debug(6, "Cannot lock the DOS list");
 		LEAVE();
 		return myList;
 	}
 
-	dosList = IDOS->NextDosEntry(dosList, LDF_VOLUMES);
+	dosList = DOSCALL(NextDosEntry(dosList, LDF_VOLUMES));
 	while (dosList) {
 		if (dosList->dol_Type == DLT_VOLUME &&
-			dosList->dol_Name &&
-			dosList->dol_Port) {
+#if defined(__amigaos4__)
+			dosList->dol_Port &&
+#else
+            dosList->dol_Task &&
+#endif
+			dosList->dol_Name) {
 
 			// The original line was
 			//if (dosList->dol_Type == DLT_VOLUME &&
@@ -393,6 +501,7 @@
 			// 1) dol_Task wasn't a task pointer, it is a message port instead
 			// 2) It was redefined to be dol_Port in dos/obsolete.h in afore mentioned SDK
 
+#if defined(__amigaos4__)
 			// Copy name to buffer
 			IDOS->CopyStringBSTRToC(dosList->dol_Name, buffer, MAXPATHLEN);
 
@@ -424,11 +533,62 @@
 			}
 
 			delete[] volName;
+#else
+                        strncpy(buffer, AROS_BSTR_ADDR(dosList->dol_Name), AROS_BSTR_strlen(dosList->dol_Name));
+                        buffer[AROS_BSTR_strlen(dosList->dol_Name)] = '\0';
+			// Volume name + ':\0'
+			char *volName = new char [strlen(buffer) + 2];
+			strcpy(volName, buffer);
+			strcat(volName, ":");
+
+                        newVolNode = (struct sysVolNode *)AllocVec(sizeof(struct sysVolNode), MEMF_CLEAR);
+                        newVolNode->svn_Node.ln_Name = volName;
+                        newVolNode->svn_Task = dosList->dol_Task;
+                        AddTail(&sysVolumes, &newVolNode->svn_Node);
+#endif
 		}
-		dosList = IDOS->NextDosEntry(dosList, LDF_VOLUMES);
+		dosList = DOSCALL(NextDosEntry(dosList, LDF_VOLUMES));
 	}
 
-	IDOS->UnLockDosList(kLockFlags);
+	DOSCALL(UnLockDosList(kLockFlags));
+#if defined(__AROS__)
+        kLockFlags = LDF_READ | LDF_DEVICES;
+	dosList = LockDosList(kLockFlags);
+	if (!dosList) {
+		debug(6, "Cannot lock the DOS Device list");
+		LEAVE();
+		return myList;
+ 	}
+ 
+	dosList = NextDosEntry(dosList, LDF_DEVICES);
+	while (dosList) {
+                ForeachNodeSafe(&sysVolumes, newVolNode, tmpNode)
+                {
+                    if (dosList->dol_Task == newVolNode->svn_Task)
+                    {
+                        BPTR volumeLock = Lock(newVolNode->svn_Node.ln_Name, SHARED_LOCK);
+                        Remove(&newVolNode->svn_Node);
+                        if (volumeLock)
+                        {
+                            char *devName = new char [AROS_BSTR_strlen(dosList->dol_Name) + 1];
+                            strncpy(devName, AROS_BSTR_ADDR(dosList->dol_Name), AROS_BSTR_strlen(dosList->dol_Name));
+                            devName[AROS_BSTR_strlen(dosList->dol_Name)] = '\0';
+                            sprintf(buffer, "%s (%s)", newVolNode->svn_Node.ln_Name, devName);
+                            delete[] devName;
+                            AmigaOSFilesystemNode *entry = new AmigaOSFilesystemNode(volumeLock, buffer);
+                            if (entry) {
+                                    myList.push_back(entry);
+                            }
+                            UnLock(volumeLock);
+                        }
+                        delete[] newVolNode->svn_Node.ln_Name;
+                        FreeVec(newVolNode);
+                    }
+                }
+		dosList = NextDosEntry(dosList, LDF_DEVICES);
+	}
+	UnLockDosList(kLockFlags);
+#endif
 
 	LEAVE();
 
diff -ruN residualvm-0.3.1/backends/fs/amigaos4/amigaos4-fs-factory.cpp residualvm-0.3.1.aros/backends/fs/amigaos4/amigaos4-fs-factory.cpp
--- residualvm-0.3.1/backends/fs/amigaos4/amigaos4-fs-factory.cpp	2018-06-13 20:01:52.000000000 +0000
+++ residualvm-0.3.1.aros/backends/fs/amigaos4/amigaos4-fs-factory.cpp	2025-06-16 14:37:05.088663380 +0000
@@ -20,7 +20,7 @@
  *
  */
 
-#if defined(__amigaos4__)
+#if defined(__amigaos4__) || defined(__AROS__)
 
 #include "backends/fs/amigaos4/amigaos4-fs-factory.h"
 #include "backends/fs/amigaos4/amigaos4-fs.h"
diff -ruN residualvm-0.3.1/backends/fs/amigaos4/amigaos4-fs.h residualvm-0.3.1.aros/backends/fs/amigaos4/amigaos4-fs.h
--- residualvm-0.3.1/backends/fs/amigaos4/amigaos4-fs.h	2018-06-13 20:01:52.000000000 +0000
+++ residualvm-0.3.1.aros/backends/fs/amigaos4/amigaos4-fs.h	2025-06-16 14:37:05.088663380 +0000
@@ -37,6 +37,13 @@
 
 #include "backends/fs/abstract-fs.h"
 
+#if defined(__amigaos4__)
+#define DOSCALL(x)      IDOS->x
+#else
+#include <dos/bptr.h>
+#define DOSCALL(x)      x
+#endif
+
 /**
  * Implementation of the ScummVM file system API.
  *
diff -ruN residualvm-0.3.1/backends/midi/camd.cpp residualvm-0.3.1.aros/backends/midi/camd.cpp
--- residualvm-0.3.1/backends/midi/camd.cpp	2018-06-13 20:01:52.000000000 +0000
+++ residualvm-0.3.1.aros/backends/midi/camd.cpp	2025-06-16 14:37:05.088663380 +0000
@@ -25,7 +25,7 @@
 
 #include "common/scummsys.h"
 
-#if defined(__amigaos4__)
+#if defined(__amigaos4__) || defined(__AROS__)
 
 #include "common/textconsole.h"
 #include "common/error.h"
@@ -39,6 +39,16 @@
 #include <proto/exec.h>
 #include <proto/dos.h>
 
+#if defined(__amigaos4__)
+#define EXECCALL(x)  IExec->x
+#define DOSCALL(x)  IDOS->x
+#define CAMDCALL(x)  _ICamd->x
+#else
+#define EXECCALL(x)	x
+#define DOSCALL(x)  x
+#define CAMDCALL(x) x
+#endif
+
 /*
  * CAMD sequencer driver
  * Mostly cut'n'pasted from FreeSCI by Christoph Reichenbach
@@ -55,8 +65,10 @@
 
 private:
 	bool _isOpen;
-	struct Library *_CamdBase;
+	struct Library *CamdBase;
+#if defined(__amigaos4__)
 	struct CamdIFace *_ICamd;
+#endif
 	struct MidiLink *_midi_link;
 	char _outport[128];
 
@@ -65,28 +77,34 @@
 };
 
 MidiDriver_CAMD::MidiDriver_CAMD()
-	: _isOpen(false), _CamdBase(NULL), _ICamd(NULL), _midi_link(NULL) {
+	: _isOpen(false), CamdBase(NULL),
+#if defined(__amigaos4__)
+	_ICamd(NULL),
+#endif
+	_midi_link(NULL) {
 }
 
 int MidiDriver_CAMD::open() {
 	if (_isOpen)
 		return MERR_ALREADY_OPEN;
 
-	_CamdBase = IExec->OpenLibrary("camd.library", 36L);
-	if (!_CamdBase) {
+	CamdBase = EXECCALL(OpenLibrary("camd.library", 36L));
+	if (!CamdBase) {
 		error("Could not open 'camd.library'");
 		return -1;
 	}
 
-	_ICamd = (struct CamdIFace *) IExec->GetInterface(_CamdBase, "main", 1, NULL);
+#if defined(__amigaos4__)
+	_ICamd = (struct CamdIFace *) IExec->GetInterface(CamdBase, "main", 1, NULL);
 	if (!_ICamd) {
 		closeAll();
 		error("Error while retrieving CAMD interface");
 		return -1;
 	}
+#endif
 
 	struct MidiNode *midi_node;
-	midi_node = _ICamd->CreateMidi(MIDI_MsgQueue, 0L, MIDI_SysExSize, 4096L, MIDI_Name, "residualvm", TAG_END);
+	midi_node = CAMDCALL(CreateMidi(MIDI_MsgQueue, 0L, MIDI_SysExSize, 4096L, MIDI_Name, "residualvm", TAG_END));
 	if (!midi_node) {
 		closeAll();
 		error("Could not create CAMD MIDI node");
@@ -100,7 +118,7 @@
 		return MERR_DEVICE_NOT_AVAILABLE;
 	}
 
-	_midi_link = _ICamd->AddMidiLink(midi_node, MLTYPE_Sender, MLINK_Location, devicename, TAG_END);
+	_midi_link = CAMDCALL(AddMidiLink(midi_node, MLTYPE_Sender, MLINK_Location, devicename, TAG_END));
 	if (!_midi_link) {
 		closeAll();
 		error("Could not create CAMD MIDI link to '%s'", devicename);
@@ -123,7 +141,7 @@
 	}
 
 	ULONG data = READ_LE_UINT32(&b);
-	_ICamd->PutMidi(_midi_link, data);
+	CAMDCALL(PutMidi(_midi_link, data));
 }
 
 void MidiDriver_CAMD::sysEx(const byte *msg, uint16 length) {
@@ -142,15 +160,15 @@
 	buf[length + 1] = 0xF7;
 
 	// Send it
-	_ICamd->PutSysEx(_midi_link, buf);
+	CAMDCALL(PutSysEx(_midi_link, buf));
 }
 
 char *MidiDriver_CAMD::getDevice() {
 	char *retname = NULL;
 
-	APTR key = _ICamd->LockCAMD(CD_Linkages);
+	APTR key = CAMDCALL(LockCAMD(CD_Linkages));
 	if (key != NULL) {
-		struct MidiCluster *cluster = _ICamd->NextCluster(NULL);
+		struct MidiCluster *cluster = CAMDCALL(NextCluster(NULL));
 
 		while (cluster && !retname) {
 			// Get the current cluster name
@@ -162,25 +180,27 @@
 				retname = _outport;
 			} else {
 				// Search the next one
-				cluster = _ICamd->NextCluster(cluster);
+				cluster = CAMDCALL(NextCluster(cluster));
 			}
 		}
 
 		// If the user has a preference outport set, use this instead
-		if(IDOS->GetVar("DefMidiOut", _outport, 128, 0))
+		if(DOSCALL(GetVar("DefMidiOut", _outport, 128, 0)))
 			retname = _outport;
 
-		_ICamd->UnlockCAMD(key);
+		CAMDCALL(UnlockCAMD(key));
 	}
 
 	return retname;
 }
 
 void MidiDriver_CAMD::closeAll() {
+#if defined(__amigaos4__)
 	if (_ICamd)
 		IExec->DropInterface((struct Interface *)_ICamd);
-	if (_CamdBase)
-		IExec->CloseLibrary(_CamdBase);
+#endif
+	if (CamdBase)
+		EXECCALL(CloseLibrary(CamdBase));
 
 	_isOpen = false;
 }
diff -ruN residualvm-0.3.1/backends/platform/sdl/amigaos/amigaos.cpp residualvm-0.3.1.aros/backends/platform/sdl/amigaos/amigaos.cpp
--- residualvm-0.3.1/backends/platform/sdl/amigaos/amigaos.cpp	2018-06-13 20:01:52.000000000 +0000
+++ residualvm-0.3.1.aros/backends/platform/sdl/amigaos/amigaos.cpp	2025-06-16 14:37:05.088663380 +0000
@@ -22,7 +22,7 @@
 
 #include "common/scummsys.h"
 
-#ifdef __amigaos4__
+#if defined(__amigaos4__) || defined(__AROS__)
 
 #include "backends/platform/sdl/amigaos/amigaos.h"
 #include "backends/fs/amigaos4/amigaos4-fs-factory.h"
diff -ruN residualvm-0.3.1/backends/platform/sdl/amigaos/amigaos-main.cpp residualvm-0.3.1.aros/backends/platform/sdl/amigaos/amigaos-main.cpp
--- residualvm-0.3.1/backends/platform/sdl/amigaos/amigaos-main.cpp	2018-06-13 20:01:52.000000000 +0000
+++ residualvm-0.3.1.aros/backends/platform/sdl/amigaos/amigaos-main.cpp	2025-06-16 14:37:05.088663380 +0000
@@ -22,7 +22,7 @@
 
 #include "common/scummsys.h"
 
-#if defined(__amigaos4__)
+#if defined(__amigaos4__) || defined(__AROS__)
 
 #include "backends/fs/amigaos4/amigaos4-fs.h"
 #include "backends/platform/sdl/amigaos/amigaos.h"
@@ -30,7 +30,7 @@
 #include "base/main.h"
 
 int main(int argc, char *argv[]) {
-
+#if !defined(__AROS__)
 	// The following will gather the application name and add the install path
 	// to a variable in AmigaOS4's ENV(ARC) system. It will be placed in AppPaths
 	// so that ScummVM can become AmiUpdate aware
@@ -63,7 +63,7 @@
 
 	// Set up a stack cookie to avoid crashes from a stack set too low
 	static const char *stack_cookie __attribute__((used)) = "$STACK: 600000";
-
+#endif
 	// Create our OSystem instance
 	g_system = new OSystem_AmigaOS();
 	assert(g_system);
diff -ruN residualvm-0.3.1/base/plugins.cpp residualvm-0.3.1.aros/base/plugins.cpp
--- residualvm-0.3.1/base/plugins.cpp	2018-06-13 20:01:52.000000000 +0000
+++ residualvm-0.3.1.aros/base/plugins.cpp	2025-06-16 14:37:05.088663380 +0000
@@ -110,7 +110,7 @@
 		#if defined(IRIX)
 		LINK_PLUGIN(DMEDIA)
 		#endif
-		#if defined(__amigaos4__)
+		#if defined(__amigaos4__) || defined(__AROS__)
 		LINK_PLUGIN(CAMD)
 		#endif
 		#if defined(MACOSX)
diff -ruN residualvm-0.3.1/common/keyboard.h residualvm-0.3.1.aros/common/keyboard.h
--- residualvm-0.3.1/common/keyboard.h	2018-06-13 20:01:52.000000000 +0000
+++ residualvm-0.3.1.aros/common/keyboard.h	2025-06-16 14:37:05.088663380 +0000
@@ -25,7 +25,7 @@
 
 #include "common/scummsys.h"
 
-#if defined(__amigaos4__)
+#if defined(__amigaos4__) || defined(__AROS__)
 // KEYCODE_LESS and KEYCODE_GREATER are already defined in AmigaOS, inside
 // include/include_h/intuition/intuition.h (bug #3121350)
 #if defined(KEYCODE_LESS) && defined(KEYCODE_GREATER)
diff -ruN residualvm-0.3.1/common/streamdebug.h residualvm-0.3.1.aros/common/streamdebug.h
--- residualvm-0.3.1/common/streamdebug.h	2018-06-13 20:01:52.000000000 +0000
+++ residualvm-0.3.1.aros/common/streamdebug.h	2025-06-16 14:37:05.088663380 +0000
@@ -23,6 +23,10 @@
 #ifndef COMMON_STREAMDEBUG_H
 #define COMMON_STREAMDEBUG_H
 
+#if defined(__AROS__)
+#undef Debug
+#endif
+
 namespace Common {
 
 class String;
diff -ruN residualvm-0.3.1/configure residualvm-0.3.1.aros/configure
--- residualvm-0.3.1/configure	2018-06-13 20:01:52.000000000 +0000
+++ residualvm-0.3.1.aros/configure	2025-06-16 14:40:19.794154077 +0000
@@ -1528,6 +1528,12 @@
 	_host_cpu=arm
 	_host_alias=arm-angstrom-linux-gnueabi
 	;;
+*aros)
+	_host_os=aros
+	datadir='${datarootdir}/data'
+	mandir='${datarootdir}/man'
+	docdir='${datarootdir}/doc/residualvm'
+	;;
 ppc-amigaos)
 	_host_os=amigaos
 	_host_cpu=powerpc
@@ -1993,7 +1999,14 @@
 #
 echo_n "Building as C++11... "
 if test "$_use_cxx11" = "yes" ; then
-	append_var CXXFLAGS "-std=c++11"
+	case $_host_os in
+	aros*)
+		append_var CXXFLAGS "-std=gnu++11"
+		;;
+	*)
+		append_var CXXFLAGS "-std=c++11"
+		;;
+	esac
 fi
 echo $_use_cxx11
 
@@ -2307,6 +2320,10 @@
 		append_var LDFLAGS "-L$DEVKITPRO/portlibs/3ds/lib"
 		append_var LIBS "-lcitro3d -lctru"
 		;;
+	aros*)
+		add_line_to_config_mk 'AMIGAOS = 1'
+		append_var SDL_NET_LIBS "-lSDL_net -lnet"
+		;;
 	amigaos*)
 		append_var LDFLAGS "-Wl,--export-dynamic"
 		append_var LDFLAGS "-L/sdk/local/newlib/lib"
@@ -3124,6 +3141,8 @@
 			_seq_midi=no
 			_port_mk="backends/platform/openpandora/op-bundle.mk"
 			;;
+		*aros)
+			;;
 		ppc-amigaos)
 			# PPC Linker requires this to fix relocation errors
 			append_var CXXFLAGS "-mlongcall"
@@ -3568,7 +3587,7 @@
 #
 echo_n "Checking if host is POSIX compliant... "
 case $_host_os in
-	amigaos* | cygwin* | dreamcast | ds | gamecube | mingw* | n64 | ps2 | ps3 | psp2 | psp | wii | wince)
+	aros* | amigaos* | cygwin* | dreamcast | ds | gamecube | mingw* | n64 | ps2 | ps3 | psp2 | psp | wii | wince)
 		_posix=no
 		;;
 	3ds | android | androidsdl | beos* | bsd* | darwin* | freebsd* | gnu* | gph-linux | haiku* | hpux* | iphone | ios7 | irix*| k*bsd*-gnu* | linux* | maemo | mint* | netbsd* | openbsd* | solaris* | sunos* | uclinux* | webos)
@@ -5055,6 +5074,9 @@
 test "x$exec_prefix" = xNONE && exec_prefix='${prefix}'
 
 case $_host_os in
+	aros*)
+		append_var DEFINES "-DDATA_PATH=\\\"PROGDIR:data\\\""
+		;;
 	mingw*)
 		# Windows stores all the external data files in executable file.
 		;;
@@ -5078,7 +5100,14 @@
 		append_var DEFINES "-DPLUGIN_DIRECTORY=\\\"host:plugins\\\""
 		;;
 	*)
-		append_var DEFINES "-DPLUGIN_DIRECTORY=\\\"$libdir/residualvm\\\""
+		case $_host_os in
+			aros*)
+				append_var DEFINES "-DPLUGIN_DIRECTORY=\\\"PROGDIR:data\\\""
+				;;
+			*)
+				append_var DEFINES "-DPLUGIN_DIRECTORY=\\\"$libdir/residualvm\\\""
+				;;
+		esac
 		;;
 esac
 
diff -ruN residualvm-0.3.1/Makefile.common residualvm-0.3.1.aros/Makefile.common
--- residualvm-0.3.1/Makefile.common	2018-06-13 20:01:52.000000000 +0000
+++ residualvm-0.3.1.aros/Makefile.common	2025-06-16 14:37:05.088663380 +0000
@@ -167,11 +167,11 @@
 VER_PATCH = $(shell echo $(VERSION) | cut -d. -f 3 | cut -c1)
 VER_EXTRA = $(shell echo $(VERSION) | cut -d. -f 3 | cut -c2-)
 
-ifdef AMIGAOS
+#ifdef AMIGAOS
 # Amiga needs date in specific format for the version cookie
 AMIGA_DATE = $(shell gdate '+%d.%m.%Y')
 base/version.o: CXXFLAGS:=$(CXXFLAGS) -DAMIGA_DATE=\"$(AMIGA_DATE)\"
-endif
+#endif
 
 ######################################################################
 # Get git's working copy information
diff -ruN residualvm-0.3.1/ports.mk residualvm-0.3.1.aros/ports.mk
--- residualvm-0.3.1/ports.mk	2018-06-13 20:01:52.000000000 +0000
+++ residualvm-0.3.1.aros/ports.mk	2025-06-16 14:37:05.088663380 +0000
@@ -18,10 +18,12 @@
 	$(INSTALL) -c -m 644 $(DIST_FILES_DOCS) "$(DESTDIR)$(docdir)"
 	$(INSTALL) -d "$(DESTDIR)$(datadir)"
 	$(INSTALL) -c -m 644 $(DIST_FILES_THEMES) $(DIST_FILES_NETWORKING) $(DIST_FILES_ENGINEDATA) "$(DESTDIR)$(datadir)/"
+ifdef USE_UNITY
 	$(INSTALL) -d "$(DESTDIR)$(datarootdir)/applications"
 	$(INSTALL) -c -m 644 "$(srcdir)/dists/residualvm.desktop" "$(DESTDIR)$(datarootdir)/applications/residualvm.desktop"
 	$(INSTALL) -d "$(DESTDIR)$(datarootdir)/appdata"
 #	$(INSTALL) -c -m 644 "$(srcdir)/dists/residualvm.appdata.xml" "$(DESTDIR)$(datarootdir)/appdata/residualvm.appdata.xml"
+endif
 	# ResidualVM specific
 ifdef USE_OPENGL_SHADERS
 	$(INSTALL) -d "$(DESTDIR)$(datadir)/shaders"
@@ -45,10 +47,12 @@
 	$(INSTALL) -c -m 644 $(DIST_FILES_DOCS) "$(DESTDIR)$(docdir)"
 	$(INSTALL) -d "$(DESTDIR)$(datadir)"
 	$(INSTALL) -c -m 644 $(DIST_FILES_THEMES) $(DIST_FILES_NETWORKING) $(DIST_FILES_ENGINEDATA) "$(DESTDIR)$(datadir)/"
+ifdef USE_UNITY
 	$(INSTALL) -d "$(DESTDIR)$(datarootdir)/applications"
 	$(INSTALL) -c -m 644 "$(srcdir)/dists/residualvm.desktop" "$(DESTDIR)$(datarootdir)/applications/residualvm.desktop"
 	$(INSTALL) -d "$(DESTDIR)$(datarootdir)/appdata"
 #	$(INSTALL) -c -m 644 "$(srcdir)/dists/residualvm.appdata.xml" "$(DESTDIR)$(datarootdir)/appdata/residualvm.appdata.xml"
+endif
 	# ResidualVM specific
 ifdef USE_OPENGL_SHADERS
 	$(INSTALL) -d "$(DESTDIR)$(datadir)/shaders"
@@ -66,8 +70,10 @@
 	rm -f "$(DESTDIR)$(datarootdir)/icons/hicolor/scalable/apps/residualvm.svg"
 	rm -rf "$(DESTDIR)$(docdir)"
 	rm -rf "$(DESTDIR)$(datadir)"
+ifdef USE_UNITY
 	rm -f "$(DESTDIR)$(datarootdir)/applications/scummvm.desktop"
 	rm -f "$(DESTDIR)$(datarootdir)/appdata/scummvm.appdata.xml"
+endif
 ifdef DYNAMIC_MODULES
 	rm -rf "$(DESTDIR)$(libdir)/residualvm/"
 endif
