diff -ruN grafX2-v2.4/src/fileformats.c grafX2-v2.4.aros/src/fileformats.c
--- grafX2-v2.4/src/fileformats.c	2012-12-05 00:18:04.000000000 +0000
+++ grafX2-v2.4.aros/src/fileformats.c	2021-01-18 05:45:40.410000000 +0000
@@ -4066,7 +4066,8 @@
                       context->Palette[x].G=palette[x].green;
                       context->Palette[x].B=palette[x].blue;
                     }
-                    free(palette);
+                    //free(palette);
+                    // disabled because it causes memory corruption on AROS
                     palette = NULL;
                   }
                   if (color_type != PNG_COLOR_TYPE_RGB && color_type != PNG_COLOR_TYPE_RGB_ALPHA)
diff -ruN grafX2-v2.4/src/global.h grafX2-v2.4.aros/src/global.h
--- grafX2-v2.4/src/global.h	2012-12-05 00:18:04.000000000 +0000
+++ grafX2-v2.4.aros/src/global.h	2021-01-18 05:52:37.280000000 +0000
@@ -303,7 +303,7 @@
 /// File format of the image currently edited. It's a value of enum ::FILE_FORMATS
 GFX2_GLOBAL byte  Main_fileformat;
 /// File selector settings
-T_Selector_settings Main_selector;
+GFX2_GLOBAL T_Selector_settings Main_selector;
 /// X position (in screen coordinates) of the separator between normal and magnified views.
 GFX2_GLOBAL short Main_separator_position;
 /// X position (in screen coordinates) of the first pixel of the magnified view.
@@ -356,7 +356,7 @@
 /// File format of the image currently edited as spare page. It's a value of enum ::FILE_FORMATS
 GFX2_GLOBAL byte  Spare_fileformat;
 /// File selector settings
-T_Selector_settings Spare_selector;
+GFX2_GLOBAL T_Selector_settings Spare_selector;
 /// X position (in screen coordinates) of the separator between normal and magnified views.
 GFX2_GLOBAL short Spare_separator_position;
 /// X position (in screen coordinates) of the first pixel of the magnified view.
@@ -425,7 +425,7 @@
 /// File format of the brush. It's a value of enum ::FILE_FORMATS
 GFX2_GLOBAL byte  Brush_fileformat;
 /// Fileselector settings
-T_Selector_settings Brush_selector;
+GFX2_GLOBAL T_Selector_settings Brush_selector;
 /// Indicator used for the "Rotate brush" operation.
 GFX2_GLOBAL byte  Brush_rotation_center_is_defined;
 /// Position of the brush's rotation center, in screen coordinates.
diff -ruN grafX2-v2.4/src/hotkeys.c grafX2-v2.4.aros/src/hotkeys.c
--- grafX2-v2.4/src/hotkeys.c	2012-12-05 00:18:04.000000000 +0000
+++ grafX2-v2.4.aros/src/hotkeys.c	2021-01-18 05:45:40.410000000 +0000
@@ -621,7 +621,7 @@
   true,
   SDLK_b, // B
   #if defined(__amigaos4__) || defined(__AROS__) || defined(__MORPHOS__) || defined(__amigaos__)
-  SDLK_C|MOD_META // Right-Amiga + C
+  SDLK_c|MOD_META // Right-Amiga + C
   #else
   0
   #endif
@@ -850,7 +850,7 @@
   true,
   SDLK_F2, // F2
   #if defined(__amigaos4__) || defined(__AROS__) || defined(__MORPHOS__) || defined(__amigaos__)
-  SDLK_A|MOD_META // Right-Amiga + A
+  SDLK_a|MOD_META // Right-Amiga + A
   #else
   0
   #endif
@@ -863,7 +863,7 @@
   true,
   SDLK_F2|MOD_SHIFT, // Shift + F2
   #if defined(__amigaos4__) || defined(__AROS__) || defined(__MORPHOS__) || defined(__amigaos__)
-  SDLK_S|MOD_META // Right-Amiga + S
+  SDLK_s|MOD_META // Right-Amiga + S
   #else
   0
   #endif
@@ -876,7 +876,7 @@
   true,
   SDLK_F3, // F3
   #if defined(__amigaos4__) || defined(__AROS__) || defined(__MORPHOS__) || defined(__amigaos__)
-  SDLK_O|MOD_META // Right-Amiga + O
+  SDLK_o|MOD_META // Right-Amiga + O
   #else
   0
   #endif
@@ -926,7 +926,7 @@
   #elif defined (__WIZ__)
     (KEY_JOYBUTTON+JOY_BUTTON_L)
   #elif defined(__amigaos4__) || defined(__AROS__) || defined(__MORPHOS__) || defined(__amigaos__)
-  SDLK_Z|MOD_META // Right-Amiga + Z
+  SDLK_z|MOD_META // Right-Amiga + Z
   #else
   0
   #endif
@@ -986,7 +986,7 @@
   #elif defined (__WIZ__)
     (KEY_JOYBUTTON+JOY_BUTTON_MENU)
   #eif defined(__amigaos4__) || defined(__AROS__) || defined(__MORPHOS__) || defined(__amigaos__)
-  SDLK_Q|MOD_META // Right-Amiga + Q
+  SDLK_q|MOD_META // Right-Amiga + Q
   #else
   0
   #endif
diff -ruN grafX2-v2.4/src/misc.c grafX2-v2.4.aros/src/misc.c
--- grafX2-v2.4/src/misc.c	2012-12-05 00:18:04.000000000 +0000
+++ grafX2-v2.4.aros/src/misc.c	2021-01-18 05:56:29.550000000 +0000
@@ -32,6 +32,7 @@
 #include "errors.h"
 #include "buttons.h"
 #include "engine.h"
+#define GRAFX2_MISC
 #include "misc.h"
 #include "keyboard.h"
 #include "sdlscreen.h"
diff -ruN grafX2-v2.4/src/misc.h grafX2-v2.4.aros/src/misc.h
--- grafX2-v2.4/src/misc.h	2012-12-05 00:18:04.000000000 +0000
+++ grafX2-v2.4.aros/src/misc.h	2021-01-18 05:57:19.010000000 +0000
@@ -25,6 +25,12 @@
 
 #include "struct.h"
 
+#ifndef GRAFX2_MISC
+#define MISCEXTERN      extern
+#else
+#define MISCEXTERN
+#endif
+
 #define SWAP_BYTES(a,b) { byte c=a; a=b; b=c;}
 #define SWAP_WORDS(a,b) { word c=a; a=b; b=c;}
 #define SWAP_DWORDS(a,b) { dword c=a; a=b; b=c;}
@@ -137,12 +143,12 @@
 void Copy_part_of_image_to_another(byte * source,word source_x,word source_y,word width,word height,word source_width,byte * dest,word dest_x,word dest_y,word destination_width);
 
 // -- Gestion du chrono --
-byte Timer_state; // State du chrono: 0=Attente d'un Xème de seconde
+MISCEXTERN byte Timer_state; // State du chrono: 0=Attente d'un Xème de seconde
                   //                 1=Il faut afficher la preview
                   //                 2=Plus de chrono à gerer pour l'instant
-dword Timer_delay;     // Nombre de 18.2ème de secondes demandés
-dword Timer_start;       // Heure de départ du chrono
-byte New_preview_is_needed; // Booléen "Il faut relancer le chrono de preview"
+MISCEXTERN dword Timer_delay;     // Nombre de 18.2ème de secondes demandés
+MISCEXTERN dword Timer_start;       // Heure de départ du chrono
+MISCEXTERN byte New_preview_is_needed; // Booléen "Il faut relancer le chrono de preview"
 
 
 #if defined (__MINT__)
diff -ruN grafX2-v2.4/src/sdlscreen.c grafX2-v2.4.aros/src/sdlscreen.c
--- grafX2-v2.4/src/sdlscreen.c	2012-12-05 00:18:04.000000000 +0000
+++ grafX2-v2.4.aros/src/sdlscreen.c	2021-01-18 05:58:36.540000000 +0000
@@ -60,6 +60,7 @@
 #endif
 
 volatile int Allow_colorcycling=1;
+byte* Screen_pixels;
 
 /// Sets the new screen/window dimensions.
 void Set_mode_SDL(int *width, int *height, int fullscreen)
diff -ruN grafX2-v2.4/src/sdlscreen.h grafX2-v2.4.aros/src/sdlscreen.h
--- grafX2-v2.4/src/sdlscreen.h	2012-12-05 00:18:04.000000000 +0000
+++ grafX2-v2.4.aros/src/sdlscreen.h	2021-01-18 05:47:59.950000000 +0000
@@ -37,41 +37,41 @@
 /// to be a multiple of 4.
 #define VIDEO_LINE_WIDTH (Screen_SDL->pitch)
 
-void Set_mode_SDL(int *,int *,int);
+extern void Set_mode_SDL(int *,int *,int);
 
-SDL_Rect ** List_SDL_video_modes;
-byte* Screen_pixels;
+extern SDL_Rect ** List_SDL_video_modes;
+extern byte* Screen_pixels;
 
-void Update_rect(short x, short y, unsigned short width, unsigned short height);
-void Flush_update(void);
-void Update_status_line(short char_pos, short width);
+extern void Update_rect(short x, short y, unsigned short width, unsigned short height);
+extern void Flush_update(void);
+extern void Update_status_line(short char_pos, short width);
 
 ///
 /// Converts a SDL_Surface (indexed colors or RGB) into an array of bytes
 /// (indexed colors).
 /// If dest is NULL, it's allocated by malloc(). Otherwise, be sure to
 /// pass a buffer of the right dimensions.
-byte * Surface_to_bytefield(SDL_Surface *source, byte * dest);
+extern byte * Surface_to_bytefield(SDL_Surface *source, byte * dest);
 /// Gets the RGB 24-bit color currently associated with a palette index.
-SDL_Color Color_to_SDL_color(byte);
+extern SDL_Color Color_to_SDL_color(byte);
 /// Reads a pixel in a 8-bit SDL surface.
-byte Get_SDL_pixel_8(SDL_Surface *bmp, int x, int y);
+extern byte Get_SDL_pixel_8(SDL_Surface *bmp, int x, int y);
 /// Reads a pixel in a multi-byte SDL surface.
-dword Get_SDL_pixel_hicolor(SDL_Surface *bmp, int x, int y);
+extern dword Get_SDL_pixel_hicolor(SDL_Surface *bmp, int x, int y);
 /// Writes a pixel in a 8-bit SDL surface.
-void Set_SDL_pixel_8(SDL_Surface *bmp, int x, int y, byte color);
+extern void Set_SDL_pixel_8(SDL_Surface *bmp, int x, int y, byte color);
 /// Convert a SDL Palette to a grafx2 palette
-void Get_SDL_Palette(const SDL_Palette * sdl_palette, T_Palette palette);
+extern void Get_SDL_Palette(const SDL_Palette * sdl_palette, T_Palette palette);
 
 ///
 /// Clears the parts of screen that are outside of the editing area.
 /// There is such area only if the screen mode is not a multiple of the pixel
 /// size, eg: 3x3 pixels in 1024x768 leaves 1 column on the right, 0 rows on bottom.
-void Clear_border(byte color);
+extern void Clear_border(byte color);
   
 extern volatile int Allow_colorcycling;
 
 /// Activates or desactivates file drag-dropping in program window.
-void Allow_drag_and_drop(int flag);
+extern void Allow_drag_and_drop(int flag);
 
 #endif // SDLSCREEN_H_INCLUDED
